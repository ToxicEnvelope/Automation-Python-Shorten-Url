Test Plan Assignment:


Feature: Url Shorten Service - https://bitly.com/


-- (1) E2E--
1. insert a valid URL to input box and click on button.
Expected:
- given valid url, a new shorten url returned

-- (2) Functional--

1. while url sent to server to be shorten,
check the api and retrieve the global_hash and hash of new shorten url. then naigate to urls
Expected:
- https://bitly.com/global_hash - should navigate to the origin url
- https://bitly.com/hash - should navigate to the origin url

-- (3) API calls--

1. during redirection, verify that the shorten Url status and multi-level call take place.
Expected:
- shorten api return 200 and a random global_hash link
- clicks api contain the new data and presents all info regarding the new short Url
- data presented in UI

-- (4) Server--

1. return step 1 and monitor server acction,
verify that link saved in disk-cache
Expected:
- should save the link in disk-cache
- when called upon, should be valid and redirect to source Url

-- (5) Analytics--

a) overall_visitors
1. navigate to the Short Url from several devices
2. verify that overall_visitors number is changing
Expected:
- number of visitors should be changed frequently

b) breakdown_by_day
1. generate a new link, attempt to navigate it at least once a day
2. repeat the navigation process from Sunday till Saturday
3. verify the number of breakdown visits per day
Expected:
- each day should display how many visits it had
- should contain the days date and differences by numbers
- should contain the details of visitor

c) breakdown_by_country
prerequisites:
   + set a vpn system to be available
1. generate a new Short Link
2. navigate for USA using VPN
3. navigate for Russia using VPN
4. navigate for China using VPN
5. navigate for Israel using VPN
6. verify the differences between visits by country
Expected:
- each country should display the information of total visits
- each country should display the total visit made per day (in case of differences in days)
- each visit should contain timestamp, date, time and geolocation given by the country linked to it

d) last_accessed
1. generate a new Short Link
2. navigate to it multiple times with a difference of some amount of time (pre 5 minutes)
3. navigate again between 23:59 - 00:01, and observe behavior
4. verify last access via the Link
Expected:
- each visit's timestamp should be different from the other
- most recent visit should visible firstly
- given navigation between 23:59 - 00:01 , the most recent visit should be display at the next day,
  but include the most recent visit at 23:59:59 as most recent on the day before.








